autoplot(series,
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = TRUE)
# Pintamos las series temporales para los usuarios por separado
autoplot(series[[]][,1],
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = TRUE)
series[[]][,1]
# Pintamos las series temporales para los usuarios por separado
autoplot(series[[]][,1],
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = FALSE)
# Pintamos las series temporales para los usuarios por separado
autoplot(series,
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = FALSE)
series[[]]
series[
]
series[][,1]
series[][1]
# Pintamos las series temporales para los usuarios por separado
autoplot(c(series[[1]],series[[2]]),
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = FALSE)
# Obtenemos el historico de tweets
load("datos/historico_tweets.RData")
View(historico.tweets)
usuarios
datos=historico.tweets
datos <- inner_join(datos, usuarios, by=c("screen_name", "users"))
datos$screen_name
datos2 <- inner_join(datos, usuarios, by = c("screen_name", "users"))
usuarios
datos2 <- inner_join(datos, usuarios, by = c("screen_name" = "users"))
datos2
filtros$usuarios
filtros=list()
filtros$usuarios=c("generalitat")
datos2 <- datos %>% inner_join(usuarios, by = c("screen_name" = "users")) %>%
filter(screen_name %in% filtros$usuarios)
filtros$usuarios="generalitat"
datos2 <- datos %>% inner_join(usuarios, by = c("screen_name" = "users")) %>%
filter(screen_name %in% filtros$usuarios)
usuarios
filtros$creacion.inicio=Sys.Date()-100
filtros$creacion.final=Sys.Date
datos2 <- datos %>% inner_join(usuarios, by = c("screen_name" = "users")) %>%  filter(between(matches("created_at"), filtros$creacion.inicio, filtros$creacion.final))
datos2 <- datos %>% inner_join(usuarios, by = c("screen_name" = "users")) %>%  filter(between(created_at, filtros$creacion.inicio, filtros$creacion.final))
datos2 <- datos %>% inner_join(usuarios, by = c("screen_name" = "users")) %>%  filter(between(extraccion, filtros$creacion.inicio, filtros$creacion.final))
datos2 <- datos %>% inner_join(usuarios, by = c("screen_name" = "users"))
View(datos2)
datos2 %>%  filter(between(created_at, filtros$creacion.inicio, filtros$creacion.final))
str(datos2$created_at)
a=as_date(datos2$created_at)
a
datos2 %>% filter(between(as_date(created_at), filtros$creacion.inicio, filtros$creacion.final))
filtros$creacion.final
filtros$creacion.inicio
filtros$creacion.final=Sys.Date()
datos2 %>% filter(between(as_date(created_at), filtros$creacion.inicio, filtros$creacion.final))
datos2 %>% filter(between(created_at, filtros$creacion.inicio, filtros$creacion.final))
filtros$creacion.final
filtros$creacion.inicio
datos2 %>%  filter(between(as_date(created_at), filtros$creacion.inicio, filtros$creacion.final))
datos2 %>%  filter(between(as_date(crehated_at), filtros$creacion.inicio, filtros$creacion.final))
datos2 %>%   filter(between(as_date(match("created_at")), filtros$creacion.inicio, filtros$creacion.final))
historico.tweets
# Aplicamos los filtros
tabla.visual <- indicadores_tweets(historico.tweets)
tabla.visual
View(tabla.visual)
# Filtros
filtros$usuarios <- c("generalitat",
"ChicoteAngel")
# Aplicamos los filtros
tweets.filtrados <- historico.tweets %>% filter(screen_name %in% filtros$usuarios)
cuentas.separadas <- tweets.filtradas %>% nest(-screen_name)
cuentas.separadas <- tweets.filtrados %>% nest(-screen_name)
cuentas.separadas
cuentas.separadas$data
cuentas.separadas <- tweets.filtrados %>% indicadores_tweets %>% nest(-screen_name)
cuentas.separadas <- tweets.filtrados %>% indicadores_tweets %>% nest(-users)
cuentas.separadas
cuentas.separadas$data
View(tweets.filtrados %>% filter(screen_name=="ChicoteAngel")
)
cuentas.separadas <- tweets.filtrados %>% indicadores_tweets %>% nest(-users)
cuentas.separadas$data[[1]]
colnames(cuentas.separadas$data[[1]])
shiny::runApp('C:/Users/D06279689E/Desktop/markdown_en_shiny')
runApp('C:/Users/D06279689E/Desktop/markdown_en_shiny')
runApp('C:/Users/D06279~1/AppData/Local/Temp/App_AitorMiota.R')
install.packages("shinythemes")
runApp('C:/Users/D06279~1/AppData/Local/Temp/App_AitorMiota.R')
install.packages("shinydashboard")
runApp('C:/Users/D06279689E/Desktop/markdown_en_shiny')
runApp('C:/Users/D06279689E/Desktop/markdown_en_shiny')
runApp('C:/Users/D06279689E/Desktop/markdown_en_shiny')
runApp('C:/Users/D06279689E/Desktop/markdown_en_shiny')
runApp('C:/Users/D06279689E/Desktop/markdown_en_shiny')
runApp('C:/Users/D06279689E/Desktop/markdown_en_shiny')
runApp('prueba')
runApp('prueba')
runApp('prueba')
runApp('prueba')
runApp('prueba')
runApp('prueba')
runApp('prueba')
runApp('prueba')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('C:/Users/D06279~1/AppData/Local/Temp/App_AitorMiota.R')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
#-------------------------------------------------------------------------
library(shinydashboard)
sidebar <- dashboardSidebar(
hr(),
sidebarMenu(id="tabs",
menuItem("Plot", tabName="plot", icon=icon("line-chart"), selected=TRUE),
menuItem("Table", tabName = "table", icon=icon("table")),
menuItem("Codes",  icon = icon("file-text-o"),
menuSubItem("Mlxtran", tabName = "pkmodel", icon = icon("angle-right")),
menuSubItem("ui.R", tabName = "ui", icon = icon("angle-right")),
menuSubItem("server.R", tabName = "server", icon = icon("angle-right"))
),
menuItem("ReadMe", tabName = "readme", icon=icon("mortar-board")),
menuItem("About", tabName = "about", icon = icon("question"))
),
hr(),
conditionalPanel("input.tabs=='plot'",
fluidRow(
column(1),
column(10,
checkboxInput("first", "First order", TRUE),
checkboxInput("zero", "Zero order", TRUE),
checkboxInput("al", "alpha order", FALSE),
checkboxInput("sequential", "Sequential (0-1)", FALSE),
checkboxInput("mixed", "Simultaneous (0-1)", FALSE),
checkboxInput("saturated", "Saturated", FALSE),
checkboxInput("legend", "Legend", TRUE)
)
)
)
)
dashboardPage(
dashboardHeader(title = "Absorption processes"),
sidebar,
dashboardBody()
)
runApp('C:/Users/D06279689E/Desktop/ShinyDashboard')
runApp('Shiny')
install.packages("shinyDashboardThemes")
runApp('Shiny')
runApp('Shiny')
library(devtools)
install_github("nik01010/dashboardthemes")
runApp('Shiny')
library(dashboardthemes)
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
install.packages("pdftools")
library("pdftools")
pdf_info("../prueba.pdf")
pdf_file <- file.path(R.home("Desktop"), "pruebaaaa.pdf")
pdf_file
pdf_info(pdf_file)
pdf_file <- file.path("C:\Users\D06279689E\Desktop\Proyecto R\pruebaaaa.pdf")
pdf_file <- file.path("C:/Users/D06279689E/Desktop/Proyecto R/pruebaaaa.pdf")
pdf_info(pdf_file)
pdf_text(pdf_file)
a=pdf_text(pdf_file)
Limpiar_texto(a)
Limpiar_texto <- function(texto) {
nice.str <- iconv(texto,'UTF-8','latin1', sub = '') %>%
gsub("[[:space:]]"," ",.) %>%
tolower
return(nice.str)
}
Limpiar_texto(a)
pdf_data(pdf_file)
pdf_data(pdf_file)
pdf_fonts(pdf_file)
pdf_attachments(pdf_file)
pdf_toc(pdf_file)
download.file("https://github.com/Huitziii/crispy-pdf/raw/master/71_PV.62.pdf",
"./71_PV.62.pdf")
text <- pdf_text("./71_PV.62.pdf")
download.file("https://github.com/Huitziii/crispy-pdf/raw/master/71_PV.62.pdf","./71_PV.62.pdf")
texto <- pdf_text(pdf_file)
text <- pdf_text(pdf_file)
text2 <- strsplit(text, "\n")
head(text2[[1]])
text[1]
text[2]
read <- readPDF(control = list(text = "-layout"))
library(tm)
read <- readPDF(control = list(text = "-layout"))
read
read[[1]]
document <- Corpus(URISource(pdf_file), readerControl = list(reader = read))
document
page_breaks <- grep("\\f", doc)
doc <- content(document[[1]])
page_breaks <- grep("\\f", doc)
page_breaks
# Inicializamos todo lo necesario
source("R/librerias.R")
source("R/inicio_twitter.R")
source("R/variables_globales.R")
source("R/funciones.R")
source("R/extraccion_tweets.R")
View(tweets.nuevos)
source("R/extraccion_seguidores.R")
source("R/extraccion_menciones.R")
N=99999999
source("R/extraccion_menciones.R")
source("R/extraccion_seguidores.R")
# Inicializamos todo lo necesario
source("R/librerias.R")
source("R/inicio_twitter.R")
source("R/variables_globales.R")
source("R/funciones.R")
# Fase 1. Extraccion de datos desde la api
source("R/extraccion_cuentas.R")
obtener_informacion <- function(seguidores) {
seguidores.unicos <- seguidores %>% select(user_id) %>% distinct()
N                 <- dim(seguidores.unicos)[1]
max.users         <- 90000
total.rep         <- ceiling(N / max.users)
info.seguidores   <- tibble()
for (i in 1:total.rep) {
inicio <- (i - 1) * max.users + 1
final  <- min(i * max.users, N)
info.seguidores <- rbind(info.seguidores, lookup_users(seguidores.unicos[inicio:final,]))
}
info.seguidores <- inner_join(info.seguidores, seguidores, by="user_id")
return(info.seguidores)
}
View(historico.seguidores)
a=get_followers("ChicoteAngel")
a
b=lookup_users(a)
View(b)
# Inicializamos todo lo necesario
source("R/librerias.R")
source("R/inicio_twitter.R")
source("R/variables_globales.R")
source("R/funciones.R")
# Fase 1. Extraccion de datos desde la api
source("R/extraccion_cuentas.R")
shiny::runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('C:/Users/D06279689E/Desktop/ShinyDashboard')
runApp('C:/Users/D06279689E/Desktop/ShinyDashboard')
a= tabItem("Visualisation",
fluidRow(
box(title = "Temperature over the last month", plotOutput("temp", height = 300),
width = 6),
box(title = "Daily rainfall over the last month", plotOutput("rain", height = 300),
width = 6)
),
# Second Row
fluidRow(
valueBoxOutput("maxTemp"),
valueBoxOutput("minTemp"),
valueBoxOutput("averageRainfall")
)
)
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
# Pagina 1 ----
# ·······························································································
pagina.1 <- tabItem("Visualisation",
# Primera fila
fluidRow(
box(title = "Temperature over the last month", plotOutput("temp", height = 300),
width = 6),
box(title = "Daily rainfall over the last month", plotOutput("rain", height = 300),
width = 6)
),
# Second Row
fluidRow(
valueBoxOutput("maxTemp"),
valueBoxOutput("minTemp"),
valueBoxOutput("averageRainfall")
)
)
# Pagina 2 ----
# ·······························································································
pagina.2 <- tabItem("Data",
verbatimTextOutput("data")
)
# Cuerpo ----
# ·······························································································
body <-   dashboardBody(
tabItems(
pagina.1,
pagina.2
)
)
body
# Cuerpo ----
# ·······························································································
body <- dashboardBody(
tabItems(
pagina.1,
pagina.2
)
)
# Cuerpo ----
# ·······························································································
body <- dashboardBody(
tabItems(
pagina.1,
pagina.3
)
)
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
startTime <- as.numeric(Sys.time())
N <- (as.numeric(Sys.time()) - startTime)/5 + 30
N
N <- ifelse(N >= 1000, 1000, N)
N
N=999999ç
N=999999
N <- ifelse(N >= 1000, 1000, N)
N
N=min(2000,N)
N
N=min(200,N)
N
N <- (as.numeric(Sys.time()) - startTime)/5 + 30 %>% min(1000)
N
N
N <- (as.numeric(Sys.time()) - startTime)/5 + 30 %>% min(1000)
N
N <- (as.numeric(Sys.time()) - startTime)/5 + 30 %>% min(10)
N
N <- (as.numeric(Sys.time()) - startTime)/5 + 30 %>% min(10)
N
N <- (as.numeric(Sys.time()) - startTime)/5 + 30 %>% min(.,10)
N
(Sys.time()) - startTime)
Sys.time() - startTime)
Sys.time() - startTime
difftime(Sys.time() , startTime)
library(lubridate)
difftime(Sys.time() , startTime)
(Sys.time() - startTime)
difftime(Sys.time() , startTime,units = "days")
startTime <- as.numeric(Sys.time())
startTime
difftime(Sys.time(), startTime)
startTime <- Sys.time()
difftime(Sys.time(), startTime)
N <- min(difftime(Sys.time(), startTime)/5 + 30, 1000)
N <- min(difftime(Sys.time(), startTime,units = "days")/5 + 30, 1000)
difftime(Sys.time(), startTime,units = "days")
Sys.time()- startTime
a=Sys.time()- startTime
a
startTime <- as.numeric(Sys.time())
N <- min((as.numeric(Sys.time()) - startTime)/5 + 30, 1000)
read.csv("Data/weatherdata.csv") %>%
slice(1:N) %>%
mutate(Dates = as.POSIXct(Dates)) %>%
slice((n()-30):n())
read.csv("Shiny/Data/weatherdata.csv") %>%
slice(1:N) %>%
mutate(Dates = as.POSIXct(Dates)) %>%
slice((n()-30):n())
read.csv("Shiny/Data/weatherdata.csv") %>%
slice(1:N) %>%
mutate(Dates = as.POSIXct(Dates)) %>%
slice((n()-30):n())
read.csv("Shiny/Data/weatherdata.csv") %>%
slice(1:N) %>%
mutate(Dates = as.POSIXct(Dates)) %>%
slice((n()-30):n())
read.csv("Shiny/Data/weatherdata.csv") %>%
slice(1:N) %>%
mutate(Dates = as.POSIXct(Dates)) %>%
slice((n()-30):n())
read.csv("Shiny/Data/weatherdata.csv") %>%
slice(1:N) %>%
mutate(Dates = as.POSIXct(Dates)) %>%
slice((n()-30):n())
read.csv("Shiny/Data/weatherdata.csv") %>%
slice(1:N) %>%
mutate(Dates = as.POSIXct(Dates)) %>%
slice((n()-30):n())
read.csv("Shiny/Data/weatherdata.csv") %>%
slice(1:N) %>%
mutate(Dates = as.POSIXct(Dates)) %>%
slice((n()-30):n())
read.csv("Shiny/Data/weatherdata.csv") %>%
slice(1:N) %>%
mutate(Dates = as.POSIXct(Dates)) %>%
slice((n()-30):n())
read.csv("Shiny/Data/weatherdata.csv") %>%
slice(1:N) %>%
mutate(Dates = as.POSIXct(Dates)) %>%
slice((n()-30):n())
read.csv("Shiny/Data/weatherdata.csv") %>%
slice(1:N) %>%
mutate(Dates = as.POSIXct(Dates)) %>%
slice((n()-30):n())
read.csv("Shiny/Data/weatherdata.csv") %>%
slice(1:N) %>%
mutate(Dates = as.POSIXct(Dates)) %>%
slice((n()-30):n())
read.csv("Shiny/Data/weatherdata.csv") %>%
slice(1:N) %>%
mutate(Dates = as.POSIXct(Dates)) %>%
slice((n()-30):n())
read.csv("Shiny/Data/weatherdata.csv") %>%
slice(1:N) %>%
mutate(Dates = as.POSIXct(Dates)) %>%
slice((n()-30):n())
read.csv("Shiny/Data/weatherdata.csv") %>%
slice(1:N) %>%
mutate(Dates = as.POSIXct(Dates)) %>%
slice((n()-30):n())
read.csv("Shiny/Data/weatherdata.csv") %>%
slice(1:N) %>%
mutate(Dates = as.POSIXct(Dates)) %>%
slice((n()-30):n())
read.csv("Shiny/Data/weatherdata.csv") %>%
slice(1:N) %>%
mutate(Dates = as.POSIXct(Dates)) %>%
slice((n()-30):n())
read.csv("Shiny/Data/weatherdata.csv") %>%
slice(1:N) %>%
mutate(Dates = as.POSIXct(Dates)) %>%
slice((n()-30):n())
read.csv("Shiny/Data/weatherdata.csv") %>%
slice(1:N) %>%
mutate(Dates = as.POSIXct(Dates)) %>%
slice((n()-30):n())
load("datos/historico_cuentas.RData")
weatherData <- reactive({
invalidateLater(5000, session)
N <- min((as.numeric(Sys.time()) - startTime)/5 + 30, 1000)
load("datos/historico_cuentas.RData")
})
weatherData
weatherData <- weatherData()
weatherData <- reactive({
invalidateLater(5000, session)
N <- min((as.numeric(Sys.time()) - startTime)/5 + 30, 1000)
read.csv("Shiny/Data/weatherdata.csv") %>%
slice(1:N) %>%
mutate(Dates = as.POSIXct(Dates)) %>%
slice((n()-30):n())
})
output$data <- renderPrint(weatherData())
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
install.packages("DT")
runApp('Shiny')
install.packages("htmlwidgets")
runApp('Shiny')
library("htmlwidgets", lib.loc="~/R/R-3.4.2/library")
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
runApp('Shiny')
detach("package:htmlwidgets", unload=TRUE)
detach("package:htmlwidgets", unload=TRUE)
library("htmlwidgets", lib.loc="~/R/R-3.4.2/library")
runApp('Shiny')
