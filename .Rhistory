tabla.visual <- cuentas.filtradas %>%  filter(between(extraccion, fecha.inicio, fecha.final)) %>%
indicadores_cuentas()
as.Date(historico.cuentas$extraccion)
str(historico.cuentas$extraccion)
historico.cuentas$account_created_at
str(historico.cuentas$account_created_at)
as.Date(historico.cuentas$account_created_at)
indicadores_cuentas <- function (cuentas){
indicadores <- transmute(cuentas, users               = name,
mes                 = mes,
n.tweets            = statuses_count,
n.seguidores        = followers_count,
n.favoritos         = favourites_count,
n.amigos            = friends_count,
n.listas            = listed_count,
ratio.likes.cuentas = round(favourites_count * 100 / friends_count, 2),
creacion            = account_created_at,
dias.creacion       = (extraccion - as.Date(account_created_at)) %>% as.integer())
return(indicadores)
}
tabla.visual <- cuentas.filtradas %>%  filter(between(extraccion, fecha.inicio, fecha.final)) %>%
indicadores_cuentas()
View(tabla.visual )
cuentas.separadas <- cuentas.filtradas %>% nest(-screen_name)
cuentas.separadas
# Obtengo las series para cada usuario
series <- map(cuentas.separadas$data, obtener.series, tipo = "users")
obtener_series <- function(datos,tipo) {
if(tipo == "users"){
vector <- c("followers_count",
"friends_count",
"listed_count",
"statuses_count",
"favourites_count")
inicio <- min(historico.cuentas$extraccion)
}
serie.temporal <-  ts(datos[, vector],
start = c(year(inicio), month(inicio)),
frequency = 12)
return(serie.temporal)
}
# Obtengo las series para cada usuario
series <- map(cuentas.separadas$data, obtener_series, tipo = "users")
series
series[[1]]
# Obtengo las series para cada usuario
series <- map(cuentas.filtradas, obtener_series, tipo = "users")
cuentas.separadas$data
cuentas.filtradas
obtener_series <- function(datos,tipo) {
if(tipo == "users"){
vector <- c("followers_count",
"friends_count",
"listed_count",
"statuses_count",
"favourites_count")
inicio <- min(historico.cuentas$extraccion)
}
serie.temporal <-  ts(datos %>% select(vector),
start = c(year(inicio), month(inicio)),
frequency = 12)
return(serie.temporal)
}
# Obtengo las series para cada usuario
series <- map(cuentas.separadas$data, obtener_series, tipo = "users")
series
# Obtengo las series para cada usuario
series <- map(cuentas.filtradas, obtener_series, tipo = "users")
obtener_series(cuentas.filtradas, "users")
ts(cuentas.filtradas)
vector <- c("followers_count",
"friends_count",
"listed_count",
"statuses_count",
"favourites_count")
ts(cuentas.filtradas %>% select(vector))
ts(cuentas.filtradas %>% select(vector)~screen_name)
series
series
# Inicializamos todo lo necesario
source("R/librerias.R")
source("R/inicio_twitter.R")
source("R/variables_globales.R")
source("R/funciones.R")
series
series[[]][1]
series[[]]
series[]
series[][1]
series[][1,]
series[1]
series[[1]]
series[[[1]]]
series[[1]
]
series[[1]][1]
series[[1]][1,]
series[1,]
dim(series)
size(series)
str(series)
# Pintamos las series temporales para los usuarios por separado
autoplot(series,
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = TRUE)
# Pintamos las series temporales para los usuarios por separado
autoplot(series[1],
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = TRUE)
# Pintamos las series temporales para los usuarios por separado
autoplot(series[1],
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = TRUE)+autoplot(series[2],
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = TRUE)
􀁧􀁧􀁰􀁬􀁯􀁴􀀨􀁥􀁣􀁯􀁮􀁯􀁭􀁩􀁣􀁳􀀬􀀠􀁡􀁥􀁳􀀨􀁤􀁡􀁴􀁥􀀬􀀠􀁵􀁮􀁥􀁭􀁰􀁬􀁯􀁹􀀩􀀩􀀠􀀫􀀠􀁧􀁥􀁯􀁭􀁟􀁬􀁩􀁮􀁥􀀨􀀩
ggplot(economics, aes(date,unemploy))+geom_line()
ggplot(economics, aes(date,unemploy))+geom_point()
economics
ggplot(economics, aes(date,unemploy.colour=class))+geom_point()
ggplot(economics, aes(date,unemploy.colour=pop))+geom_point()
ggplot(economics, aes(date,unemploy,colour=pop))+geom_point()
ggplot(economics, aes(date,unemploy,colour=pce))+geom_point()
ggplot(economics, aes(date,unemploy,shape=pce))+geom_point()
ggplot(economics, aes(date,unemploy,shape=pop))+geom_point()
ggplot(economics, aes(date,unemploy,size=pop))+geom_point()
ggplot(economics, aes(date,unemploy,colours()=pop))+geom_point()
ggplot(economics, aes(date,unemploy,colours=pop))+geom_point()
ggplot(economics, aes(date,unemploy,colours="blue"))+geom_point()
ggplot(economics, aes(date,unemploy,colour=pop))+geom_point()
ggplot(economics, aes(date,unemploy,colour="blue"))+geom_point()
􀁧􀁧􀁰􀁬􀁧􀁧􀁰􀁬􀁯􀁴􀀨􀁭􀁰􀁧􀀬 􀁡􀁥􀁳􀀨􀁤􀁩􀁳􀁰􀁬􀀬􀀠􀁨􀁷􀁹􀀩􀀩􀀠􀀫
􀁧􀁥􀁯􀁭􀁟􀁰􀁯􀁩􀁮􀁴􀀨􀀩􀀠􀀫
􀁦􀁡􀁣􀁥􀁴􀁟􀁷􀁲􀁡􀁰􀀨􀁾􀁣􀁬􀁡􀁳􀁳􀀩􀁯􀁴􀀨􀁭􀁰􀁧􀀬 􀁡􀁥􀁳􀀨􀁤􀁩􀁳􀁰􀁬􀀬􀀠􀁨􀁷􀁹􀀩􀀩􀀠􀀫
􀁧􀁥􀁯􀁭􀁟􀁰􀁯􀁩􀁮􀁴􀀨􀀩􀀠􀀫
􀁦􀁡􀁣􀁥􀁴􀁟􀁷􀁲􀁡􀁰􀀨􀁾􀁣􀁬􀁡􀁳􀁳􀀩
ggplot(mpg, aes(displ,hwy))+geom_point()+facet_wrap(~class)
ggplot(mpg, aes(displ,hwy))+geom_point()+facet(~class)
􀁧􀁧􀁰􀁬􀁯􀁴􀀨􀁭􀁰􀁧􀀬 􀁡􀁥􀁳􀀨􀁤􀁩􀁳􀁰􀁬􀀬􀀠􀁨􀁷􀁹􀀩􀀩􀀠􀀫
􀁧􀁥􀁯􀁭􀁟􀁰􀁯􀁩􀁮􀁴􀀨􀀩􀀠􀀫
􀁧􀁥􀁯􀁭􀁟􀁳􀁭􀁯􀁯􀁴􀁨􀀨􀀩
ggplot(mpg,aes(displ,hwy))+geom_point()+geom_smooth()
library(ggplot2)
ggplot(mpg,aes(displ,hwy))+geom_point()+geom_smooth()
?dplyr
??dplyr
?select
??select
?loess
?select
?max
miriam <- read.table("C:/Users/D06279689E/Desktop/miriam.odt", quote="\"", comment.char="")
View(miriam)
library(readr)
miriam <- read_delim("C:/Users/D06279689E/Desktop/miriam.odt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(miriam)
library(readr)
miriam1 <- read_delim("C:/Users/D06279689E/Desktop/miriam1.txt",
"\t", escape_double = FALSE, locale = locale(encoding = "WINDOWS-1252"),
trim_ws = TRUE)
View(miriam1)
a="or mucho que antes
los gobiernos del PP
en la Generalitat y
ahora la izquierda se
empeñen en vender como un
éxito que el Consell tenga que vivir
«enchufado» a la respiración
asistida del rescate a través del
Fondo de Liquidez Autonómica
(FLA), lo cierto es que, una vez
más, lo único que le llega a la Comunidad
Valenciana desde Madrid
es una limosna que permite
sólo sobrevivir a duras penas y
que, por supuesto, impide diseñar
nuevas políticas de inversión
para tratar de salir del atolladero.
La solución que pone encima de
la mesa el Ministro de Hacienda
en funciones, Cristóbal
Montoro, para la autonomía que
aporta a España el  de toda su
riqueza, es otro préstamo con los
bancos por la vía del rescate para
salvar el ejercicio y poder cubrir
el déficit. Nada más. Resumiendo:
dinero para tener liquidez y
tapar agujeros pero que habrá
que devolver a las entidades de
crédito, engordando una deuda
que ya llega a los . millones
y que ahoga a la Generalitat hasta
poner en peligro su viabilidad.
Los populares, en la última etapa
de Alberto Fabra, se «conformaban
» con los donativos de Montoro.
Chillaban en las Cortes Valencianas
pero se callaban cuando
llegaban a La Moncloa. No les quedaba
otro remedio. La situación
económica impedía, según el PP,
un cambio en el modelo de la financiación
autonómica. Pero, sobre
todo, la Generalitat no tenía otro
remedio que «tragarse» el rescate
de Hacienda mientras la negociación
para el reparto de fondos entre
las autonomías quedó bloqueada
desde , cuando caducó
el actual sistema. Estaban atados
de pies y manos. Sin ingresos por
la crisis económica y sin financiación,
ese rescate era la única esperanza
para intentar cumplir, algo
que no consiguieron. Todavía está
pagando el actual gobierno que
comparten los socialistas y Compromís
facturas de la etapa del PP.
Ahora el Consell de izquierdas
cae en el mismo error: también saluda
con júbilo el supuesto «éxito»
de la negociación del presidente de
la Generalitat, Ximo Puig, con
Montoro cuando en realidad lo
que ha logrado es lo mismo que antes
le criticaban al PP. Así que hemos
cambiado de color en el Consell
pero seguimos viviendo de la
«limosna» del Estado sin una solución
real al problema de una
Comunidad que sufre –al margen
del evidente descontrol y el caos en
la gestión del Consell, especialmente,
en el mandato de Francisco
Camps– un evidente expolio en
el reparto de los fondos autonómicos.
Los datos son contundentes
y evidencian ese maltrato. A pesar
de que la renta valenciana está
doce puntos por debajo de la media,
la Comunidad es la única autonomía
con una renta inferior a la
del conjunto de España que, por
contra, sale siempre malparada
en la distribución del dinero que
Madrid dedica a los gobiernos autonómicos.
Recibimos unos .
millones menos de los que nos
tocaría cada año, un perjuicio para
la Comunidad que tiene un impacto
directo en la calidad de los
servicios públicos como la Sanidad,
la Educación o el Bienestar Social,
competencias de la Generalitat.
De forma global, conforme a los
datos de los expertos de las Cortes,
entre la «deuda histórica» que genera
la falta de financiación y el déficit
cercano a los . millones en
inversiones, la Comunidad ha dejado
de percibir cerca de . millones
en los últimos quince años.
Una cantidad suficiente como para
haber reducido el endeudamiento
a la mitad y haber completado el
mapa de inversiones que necesita
un territorio capaz de generar riqueza,
especialmente en el sector
servicios, para «tirar» de la economía
del conjunto de España.
La inestabilidad política que se
vive con el «bloqueo» para formar
gobierno en Madrid repercute directamente
en la futura estabilidad
financiera de la Comunidad. Sin un
nuevo ejecutivo no hay posibilidades
de que antes de final de
año se reforme el modelo de financiación
autonómica. Eso significa
que habrá que intentar cubrir
el año, una vez más, con el dinero
del rescate –plan extraordinario
de tesorería, de acuerdo con el
eufemismo utilizado– que de forma
«generosa», es un decir, le concedió
Montoro a Puig. Sin un ejecutivo
que cambie la financiación,
la cosa pinta mal. Pero tampoco tiene
visos de mejorar con un gobierno
encabezado por Pedro Sánchez
en el que Albert Rivera juegue
un papel de relevancia. Ayer en
el debate en el Congreso de la reforma
del Estatuto de Autonomía
de la Comunidad, Ciudadanos fue
el único de los principales partidos
que se negó a votar a favor de una
modificación que llevaba bloqueada
desde hace cinco años y
que supondría una inyección de
 millones anuales en inversiones.
Puede que esa tramitación
parlamentaria, en el caso de nuevas
elecciones, quede de nuevo
aplazada pero, desde luego, la votación
evidencia la «sensibilidad»
que los socios que ha escogido el
PSOE en Madrid tienen con los
problemas de los valencianos. Y
confirma el discurso de Rivera,
que avala la falta de financiación de
Cataluña mientras niega –ya lo explicitó
en una entrevista en este periódico–
la de la Comunidad.
A estas alturas, con el Gobierno
facilitando que crezca la deuda con
el recurso a los préstamos como única
solución; mientras, por otro lado,
continúa hostigando a la Generalitat
con la petición de nuevos ajustes
y de más recortes, la salida que
le queda al Consell es intentar pasar
el ejercicio –objetivo para el
que necesita, sea de donde sea,
. millones– para seguir reclamando
una financiación justa, la
deuda histórica y más inversiones.
Esta Comunidad no puede vivir ya
de más limosnas. Es sencillo: sólo
necesita que le paguen el cheque
con el dinero que le corresponde."
library(ggplot2)
ggplot(mpg, aes(displ,hwy))+geom_point()+geom_smooth()
ggplot(mpg, aes(displ,hwy))+geom_point()+geom_boxplot()
ggplot(mpg, aes(displ,hwy))+geom_smooth()+geom_boxplot()
library(spdep)
nc.sids
data(nc.sids)
plot(sidspolys, forcefill = FALSE)
points(sidscents)
plot(sidspolys, forcefill = FALSE)
nc.sids
library(maptools)
plot(sidspolys, forcefill = FALSE)
nc_file <- system.file("shapes/sids.shp", package = "maptools")[1]
nc <- readOGR(system.file("shapes/sids.shp", package = "spData")[1])
nc <- readOGR(system.file("shapes/sids.shp", package = "spData")[1])
library(sp)
nc <- readOGR(system.file("shapes/sids.shp", package = "spData")[1])
library(foreign)
nc <- readOGR(system.file("shapes/sids.shp", package = "spData")[1])
library(rgdal)
nc <- readOGR(system.file("shapes/sids.shp", package = "spData")[1])
nc <- readShapeSpatial(system.file("shapes/sids.shp",
+         package = "spData")[1])
nc <- readShapeSpatial(system.file("shapes/sids.shp",
package = "spData")[1])
nc <- readShapeSpatial(system.file("shapes/sids.shp",package = "spData")[1])
library(maptools)
nc <- readShapeSpatial(system.file("shapes/sids.shp",package = "spData")[1])
if (require(rgdal, quietly = TRUE)) {
nc <- readOGR(system.file("shapes/sids.shp", package = "spData")[1])
} else {
require(maptools, quietly = TRUE)
nc <- readShapeSpatial(system.file("shapes/sids.shp",package = "spData")[1])
}
if (require(rgdal, quietly = TRUE)) {
ab <- readOGR(system.file("shapes/sids.shp", package = "spData")[1])
} else {
require(maptools, quietly = TRUE)
nc <- readShapeSpatial(system.file("shapes/sids.shp",package = "spData")[1])
}
ab
proj4string(nc) <- CRS("+proj=longlat +datum=NAD27")
row.names(nc) <- as.character(nc$FIPSNO)
plot(nc, axes = TRUE)
point.in.polygon(nc)
gal_file <- system.file("weights/ncCR85.gal", package = "spData")[1]
ncCR85 <- read.gal(gal_file, region.id = nc$FIPSNO)
ncCR85
plot(nc, border = "grey")
plot(ncCC89, coordinates(nc), add = TRUE, col = "blue")
plot(ncCC85, coordinates(nc), add = TRUE, col = "blue")
plot(ncCR85, coordinates(nc), add = TRUE, col = "blue")
ncCR85
ncCR85$1
ncCR85[[1]]
ncCR85[[2]]
nc <- readOGR(system.file("shapes/sids.shp", package = "spData")[1])
nc
ncCR85
ncCR85[[3]]
r.id <- attr(ncCR85, "region.id")
r.id
r.id <- ncCR85$region.id
r.id
r.id <- attr(ncCR85, "region.id")
# Inicializamos todo lo necesario
source("R/librerias.R")
source("R/inicio_twitter.R")
source("R/variables_globales.R")
source("R/funciones.R")
source("R/extraccion_seguidores.R")
warnings()
seguidores
resumen.seg
resumen.seg
# Obtenemos los seguidores de cada usuario
seguidores <- users %>% map( get_followers,
n                = "3",
retryonratelimit = TRUE) %>%
map2_df(users, cbind) %>%
rename( "cuenta" = ".y[[i]]")
# Obtenemos los seguidores de cada usuario
seguidores <- users %>% map( get_followers,
n                = 4,
retryonratelimit = TRUE) %>%
map2_df(users, cbind) %>%
rename( "cuenta" = ".y[[i]]")
View(historico.seguidores)
View(historico.seguidores)
# Obtenemos los seguidores de cada usuario
seguidores <- users %>% map( get_followers,
n                = 4,
retryonratelimit = TRUE) %>%
map2_df(users, cbind) %>%
rename( "cuenta" = ".y[[i]]")
seguidores <- users %>% map( get_followers,
n                = 4,
retryonratelimit = TRUE)
source("R/inicio_twitter.R")
# Inicializamos todo lo necesario
source("R/librerias.R")
source("R/inicio_twitter.R")
curl::curl_fetch_memory(url, handle = handle)
# Inicializamos todo lo necesario
source("R/librerias.R")
source("R/inicio_twitter.R")
source("R/variables_globales.R")
source("R/funciones.R")
seguidores <- users %>% map( get_followers,
n                = 4,
retryonratelimit = TRUE)
seguidores
users
historico.cuentas
View(historico.cuentas)
# Obtenemos los seguidores de cada usuario
seguidores <- users %>% map( get_followers,
n                = 150000,
retryonratelimit = TRUE) %>%
map2_df(users, cbind) %>%
rename( "cuenta" = ".y[[i]]")
info.seguidores <- obtener_informacion(seguidores)
seguidores.unicos <- seguidores %>% select(user_id) %>% distinct()
seguidores %>% select(user_id)
seguidores %>% select(user_id) %>% distinct()
seguidores %>% select(user_id) %>% unique()
seguidores %>% select(user_id) %>% distinct()
seguidores %>% select(user_id) %>% distinct()
seguidores.unicos <- seguidores %>% select(user_id) %>% distinct()
N                 <- dim(seguidores.unicos)[1]
max.users         <- 90000
total.rep         <- ceiling(N / max.users)
info.seguidores   <- tibble()
for (i in 1:total.rep) {
inicio <- (i - 1) * max.users + 1
final  <- min(i * max.users, N)
info.seguidores <- rbind(info.seguidores, lookup_users(seguidores.unicos[inicio:final,]))
}
memory.limit()
memory.size()
memory.size(2)
memory.size(2000)
memory.size(4000)
memory.limit()
memory.size(5000)
memory.size(4500)
memory.size(4100)
memory.size(4000)
info.seguidores <- obtener_informacion(seguidores)
seguidores
info.seguidores <- obtener_informacion(seguidores)
# Inicializamos todo lo necesario
source("R/librerias.R")
source("R/inicio_twitter.R")
source("R/variables_globales.R")
source("R/funciones.R")
info.seguidores <- obtener_informacion(seguidores)
memory.limit(4010ç)
memory.limit(4010)
memory.limit()
q
q
sdf
ads
adsf
dfg
ewrt
dg
View(historico.menciones)
