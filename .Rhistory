ts.plot(serie.temporal)
ts.plot(serie.temporal[,1])
ggpplot(serie.temporal[,1])
ggplot(serie.temporal[,1])
autolot(serie.temporal[,1])
autoplot(serie.temporal[,1])
# Obtenemos las series correspondientes para el data.frame
# -----------------------------------------------------------------------------
obtener.series <- function(datos,tipo) {
if(tipo = "users"){
vector <- c("followers_count",
"friends_count",
"listed_count",
"statuses_count",
"favourites_count")
inicio <- min(historico.cuentas$extraccion)
}
serie.temporal <-  ts(tabla.final[, vector],
start = c(year(inicio), month(inicio)),
frequency = 12)
return(serie.temporal)
}
# Obtenemos las series correspondientes para el data.frame
# -----------------------------------------------------------------------------
obtener.series <- function(datos,tipo) {
if(tipo = "users"){
vector <- c("followers_count",
"friends_count",
"listed_count",
"statuses_count",
"favourites_count")
inicio <- min(historico.cuentas$extraccion)
}
serie.temporal <-  ts(tabla.final[, vector],
start = c(year(inicio), month(inicio)),
frequency = 12)
return(serie.temporal)
}
if(tipo = "users"){
vector <- c("followers_count",
"friends_count",
"listed_count",
"statuses_count",
"favourites_count")
inicio <- min(historico.cuentas$extraccion)
}
# Obtenemos las series correspondientes para el data.frame
# -----------------------------------------------------------------------------
obtener.series <- function(datos,tipo) {
if(tipo == "users"){
vector <- c("followers_count",
"friends_count",
"listed_count",
"statuses_count",
"favourites_count")
inicio <- min(historico.cuentas$extraccion)
}
serie.temporal <-  ts(tabla.final[, vector],
start = c(year(inicio), month(inicio)),
frequency = 12)
return(serie.temporal)
}
cuentas.filtradas=tabla.final
cuentas.separadas <- cuentas.filtradas %>% nest(-screen_name)
cuentas.separadas
series <- map(cuentasGVA2$data, obtener.series)
series <- map(cuentasGVA2$data, obtener.series,tipo="users")
series
series <- map(cuentas.separadas$data, obtener.series, tipo = "users")
series
# Pintamos las series temporales para un usuario
autoplot(series,
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = TRUE)
filtro.usuarios=generalitat
filtro.usuarios="generalitat"
# Obtenemos la informacion de los usuarios deseados
cuentas.filtradas <- historico.cuentas %>% filter(screen_name %in% filtro.usuarios)
cuentas.separadas <- cuentas.filtradas %>% nest(-screen_name)
series <- map(cuentas.separadas$data, obtener.series, tipo = "users")
# Pintamos las series temporales para un usuario
autoplot(series,
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = TRUE)
cuentas.separadas
series <- map(cuentas.separadas$data, obtener.series, tipo = "users")
series[[2]]
series[[1]]
# Pintamos las series temporales para un usuario
autoplot(series,
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = TRUE)
se=as_tibble(series)
series
se=series[[1]]
# Pintamos las series temporales para un usuario
autoplot(se,
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = TRUE)
# Solo se vera informacion de estos usuarios
filtro.usuarios <- c("generalitat","ChicoteAngel")
# Obtenemos la informacion de los usuarios deseados
cuentas.filtradas <- historico.cuentas %>% filter(screen_name %in% filtro.usuarios)
tabla.visual <- cuentas.filtradas %>%  filter(between(extraccion, fecha.inicio, fecha.final)) %>%
indicadores_cuentas()
cuentas.separadas <- cuentas.filtradas %>% nest(-screen_name)
# Obtengo las series para cada usuario
series <- map(cuentas.separadas$data, obtener.series, tipo = "users")
series[[2]]
# Pintamos las series temporales para un usuario
autoplot(series,
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = TRUE)
# Pintamos las series temporales para un usuario
autoplot(series,
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = FALSE)
series[[3]]== NULL
series[[3]]==NA
series[[3]]=NA
dim(series)
size(series)
length(series)
if(length(series)==1) series <- series[[1]]
if(length(series)==1) series <- series[[1]]
# Pintamos las series temporales para los usuarios por separado
autoplot(series,
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = TRUE)
# Obtengo las series para cada usuario
series <- map(cuentas.separadas$data, obtener.series, tipo = "users")
if(length(series)==1) series <- series[[1]]
# Pintamos las series temporales para los usuarios por separado
autoplot(series,
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = TRUE)
pmap(series[[1]],series[[2]],autoplot)
series[[2]]
map2(series[[1]],series[[2]],autoplot)
# Pintamos las series temporales para los usuarios por separado
autoplot(series[[1]],
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = TRUE)
par(new=TRUE)
# Pintamos las series temporales para los usuarios por separado
autoplot(series[[2]],
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = TRUE)
# Pintamos las series temporales para los usuarios por separado
autoplot(series[[2]],
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "points",
facets      = TRUE)
# Pintamos las series temporales para los usuarios por separado
autoplot(series[[2]],
ts.linetype = 1,
ts.colour   = "red",
ts.geom     = "points",
facets      = TRUE)
# Pintamos las series temporales para los usuarios por separado
autoplot(series[[2]],
ts.linetype = 1,
ts.colour   = "red",
ts.geom     = "points",
facets      = TRUE)
par(new=FALSE)
[
# Pintamos las series temporales para los usuarios por separado
autoplot(series[[2]],
ts.linetype = 1,
ts.colour   = "red",
ts.geom     = "points",
facets      = TRUE)
autoplot(series[[2]],
ts.linetype = 1,
ts.colour   = "blue",
ts.geom     = "line",
facets      = TRUE)
autoplot(series[[1]],
ts.linetype = 1,
ts.colour   = "blue",
ts.geom     = "line",
facets      = TRUE)
# Pintamos las series temporales para los usuarios por separado
autoplot(series[[1]][,1],
ts.linetype = 1,
ts.colour   = "blue",
ts.geom     = "line",
facets      = TRUE)
# Pintamos las series temporales para los usuarios por separado
autoplot(series[[1]],
ts.linetype = 1,
ts.colour   = "blue",
ts.geom     = "line",
facets      = TRUE)
# Pintamos las series temporales para los usuarios por separado
autoplot(series[[1]],
ts.linetype = 1,
ts.colour   = "blue",
ts.geom     = "line",
facets      = FALSE)
cuentas.separadas
d.arima <- auto.arima(series)
abbline(a=2021)
abline(a=2021)
abline(a=2021,1)
abline(v=2012)
abline(v=2012)
abline(v=2021)
# Pintamos las series temporales para los usuarios por separado
autoplot(series,
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = TRUE)
abline(v=2021)
dev.on()
dev.off()
# Pintamos las series temporales para los usuarios por separado
autoplot(series,
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = TRUE)
dev.off()
# Pintamos las series temporales para los usuarios por separado
autoplot(series,
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = TRUE)
a=series[[]][,1]
a
a=series[[,]][,1]
a=series[[]][,1]
map2(series[[1]],series[[2]],bind_cols)
map2(series[[1]][,-1],series[[2]][,-1],bind_cols)
a=map2(series[[1]][,-1],series[[2]][,-1],bind_cols)
# Pintamos las series temporales para los usuarios por separado
autoplot(series,
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = FALSE)
# Pintamos las series temporales para los usuarios por separado
autoplot(series,
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = TRUE)
# Obtenemos la informacion de historico
load("datos/historico_cuentas.RData")
# Extraemos la informaciÃ³n de los users
cuentasGVA <- lookup_users(users)
# Inicializamos todo lo necesario
source("R/librerias.R")
source("R/inicio_twitter.R")
source("R/variables_globales.R")
source("R/funciones.R")
# Fase 1. Extraccion de datos desde la api
source("R/extraccion_cuentas.R")
historico.cuentas
source("R/extraccion_seguidores.R")
# Inicializamos todo lo necesario
source("R/librerias.R")
source("R/inicio_twitter.R")
# Obtenemos los seguidores de cada usuario
seguidores <- map(users, get_followers,
n                = 141284,
retryonratelimit = TRUE) %>%
map2_df(users, cbind) %>%
rename( "cuenta" = ".y[[i]]")
mapply(rep, 1:4, 4:1)
map2(1:4,2:1,rep)
map2(1:4,4:1,rep)
install.packages("mailR")
library(mailR)
sender <- "angel.r.chicote@gmail.com"  # Replace with a valid address
recipients <- c("angel.r.chicote@gmail.com")  # Replace with one or more valid addresses
email <- send.mail(from = sender,
to = recipients,
subject="Subject of the email",
body = "Body of the email",
smtp = list(host.name = "aspmx.l.google.com", port = 25),
authenticate = FALSE,
send = FALSE)
email <- send.mail(from = sender,
to = recipients,
subject="Subject of the email",
body = "Body of the email",
smtp = list(host.name = "aspmx.l.google.com", port = 25),
authenticate = TRUE,
send = FALSE)
email <- send.mail(from = sender,
to = recipients,
subject="Subject of the email",
body = "Body of the email",
smtp = list(host.name = "aspmx.l.google.com", port = 25),
authenticate = TRUE,
send = FALSE)
library(devtools)
install_github("rpremraj/mailR")
library(mailR)
email <- send.mail(from = sender,
to = recipients,
subject="Subject of the email",
body = "Body of the email",
smtp = list(host.name = "aspmx.l.google.com", port = 25),
authenticate = FALSE,
send = FALSE)
sender
recipients
email <- send.mail(from = sender,
to = recipients,
subject="Subject of the email",
body = "Body of the email",
smtp = list(host.name = "aspmx.l.google.com", port = 25),
authenticate = FALSE,
send = TRUE)
email
email <- send.mail(from = sender,
to = recipients,
subject="Subject of the email",
body = "Body of the email",
smtp = list(host.name = "aspmx.l.google.com", port = 25),
authenticate = TRUE,
send = TRUE)
seguidores <- map(users, get_followers,
n                = 141284,
retryonratelimit = TRUE) %>%
map2_df(users, cbind) %>%
rename( "cuenta" = ".y[[i]]")
info.seguidores <- obtener_informacion(seguidores)
seguidores.unicos <- seguidores %>% select(user_id) %>% distinct()
seguidores.unicos
obtener_informacion <- function(seguidores) {
seguidores.unicos <- seguidores %>% select(user_id) %>% distinct()
N                 <- dim(seguidores.unicos)[1]
max.users         <- 90000
total.rep         <- ceiling(N / max.users)
info.seguidores   <- tibble()
for (i in 1:total.rep) {
inicio <- (i - 1) * max.users + 1
final  <- min(i * max.users, N)
info.seguidores <- rbind(info.seguidores, lookup_users(seguidores.unicos[inicio:final,]))
}
info.seguidores <- inner_join(info.seguidores, seguidores, by="user_id")
return(info.seguidores)
}
info.seguidores <- obtener_informacion(seguidores)
memory.limit()
memory.size()
View(info.seguidores)
View(info.seguidores)
View(info.seguidores)
memory.size()
# Inicializamos todo lo necesario
source("R/librerias.R")
source("R/inicio_twitter.R")
source("R/variables_globales.R")
source("R/funciones.R")
# Obtenemos la informacion de los usuarios deseados
cuentas.filtradas <- historico.cuentas %>% filter(screen_name %in% filtro.usuarios)
# Obtenemos la informacion de historico
load("datos/historico_cuentas.RData")
# Filtros
filtro.usuarios <- c("generalitat",
"ChicoteAngel")
# Obtenemos la informacion de los usuarios deseados
cuentas.filtradas <- historico.cuentas %>% filter(screen_name %in% filtro.usuarios)
tabla.visual <- cuentas.filtradas %>%  filter(between(extraccion, fecha.inicio, fecha.final)) %>%
indicadores_cuentas()
View(cuentas.filtradas)
cuentas.separadas <- cuentas.filtradas %>% nest(-screen_name)
# Obtengo las series para cada usuario
series <- map(cuentas.separadas$data, obtener.series, tipo = "users")
series
cuentas.separadas$data
cuentas.filtradas <- historico.cuentas
mutate(cuentas.filtradas,screen_name="generalitat" )
cuentas.filtradas <- mutate(cuentas.filtradas,screen_name="generalitat" )
cuentas.separadas <- cuentas.filtradas %>% nest(-screen_name)
cuentas.filtradas2 <- mutate(cuentas.filtradas,screen_name="chicote" )
cuentas.separadas <- rbind(cuentas.separadas,cuentas.separadas2)
cuentas.filtradas <- rbind(cuentas.filtradas,cuentas.filtradas2)
cuentas.separadas <- cuentas.filtradas %>% nest(-screen_name)
cuentas.separadas
# Obtengo las series para cada usuario
series <- map(cuentas.separadas$data, obtener.series, tipo = "users")
series
# Pintamos las series temporales para los usuarios por separado
autoplot(series,
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = TRUE)
# Pintamos las series temporales para los usuarios por separado
autoplot(series[[]][,1],
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = TRUE)
series[[]][,1]
# Pintamos las series temporales para los usuarios por separado
autoplot(series[[]][,1],
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = FALSE)
# Pintamos las series temporales para los usuarios por separado
autoplot(series,
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = FALSE)
series[[]]
series[
]
series[][,1]
series[][1]
# Pintamos las series temporales para los usuarios por separado
autoplot(c(series[[1]],series[[2]]),
ts.linetype = 1,
ts.colour   = "black",
ts.geom     = "line",
facets      = FALSE)
# Obtenemos el historico de tweets
load("datos/historico_tweets.RData")
View(historico.tweets)
usuarios
datos=historico.tweets
datos <- inner_join(datos, usuarios, by=c("screen_name", "users"))
datos$screen_name
datos2 <- inner_join(datos, usuarios, by = c("screen_name", "users"))
usuarios
datos2 <- inner_join(datos, usuarios, by = c("screen_name" = "users"))
datos2
filtros$usuarios
filtros=list()
filtros$usuarios=c("generalitat")
datos2 <- datos %>% inner_join(usuarios, by = c("screen_name" = "users")) %>%
filter(screen_name %in% filtros$usuarios)
filtros$usuarios="generalitat"
datos2 <- datos %>% inner_join(usuarios, by = c("screen_name" = "users")) %>%
filter(screen_name %in% filtros$usuarios)
usuarios
filtros$creacion.inicio=Sys.Date()-100
filtros$creacion.final=Sys.Date
datos2 <- datos %>% inner_join(usuarios, by = c("screen_name" = "users")) %>%  filter(between(matches("created_at"), filtros$creacion.inicio, filtros$creacion.final))
datos2 <- datos %>% inner_join(usuarios, by = c("screen_name" = "users")) %>%  filter(between(created_at, filtros$creacion.inicio, filtros$creacion.final))
datos2 <- datos %>% inner_join(usuarios, by = c("screen_name" = "users")) %>%  filter(between(extraccion, filtros$creacion.inicio, filtros$creacion.final))
datos2 <- datos %>% inner_join(usuarios, by = c("screen_name" = "users"))
View(datos2)
datos2 %>%  filter(between(created_at, filtros$creacion.inicio, filtros$creacion.final))
str(datos2$created_at)
a=as_date(datos2$created_at)
a
datos2 %>% filter(between(as_date(created_at), filtros$creacion.inicio, filtros$creacion.final))
filtros$creacion.final
filtros$creacion.inicio
filtros$creacion.final=Sys.Date()
datos2 %>% filter(between(as_date(created_at), filtros$creacion.inicio, filtros$creacion.final))
datos2 %>% filter(between(created_at, filtros$creacion.inicio, filtros$creacion.final))
filtros$creacion.final
filtros$creacion.inicio
datos2 %>%  filter(between(as_date(created_at), filtros$creacion.inicio, filtros$creacion.final))
datos2 %>%  filter(between(as_date(crehated_at), filtros$creacion.inicio, filtros$creacion.final))
datos2 %>%   filter(between(as_date(match("created_at")), filtros$creacion.inicio, filtros$creacion.final))
historico.tweets
# Aplicamos los filtros
tabla.visual <- indicadores_tweets(historico.tweets)
tabla.visual
View(tabla.visual)
# Filtros
filtros$usuarios <- c("generalitat",
"ChicoteAngel")
# Aplicamos los filtros
tweets.filtrados <- historico.tweets %>% filter(screen_name %in% filtros$usuarios)
cuentas.separadas <- tweets.filtradas %>% nest(-screen_name)
cuentas.separadas <- tweets.filtrados %>% nest(-screen_name)
cuentas.separadas
cuentas.separadas$data
cuentas.separadas <- tweets.filtrados %>% indicadores_tweets %>% nest(-screen_name)
cuentas.separadas <- tweets.filtrados %>% indicadores_tweets %>% nest(-users)
cuentas.separadas
cuentas.separadas$data
View(tweets.filtrados %>% filter(screen_name=="ChicoteAngel")
)
cuentas.separadas <- tweets.filtrados %>% indicadores_tweets %>% nest(-users)
cuentas.separadas$data[[1]]
colnames(cuentas.separadas$data[[1]])
